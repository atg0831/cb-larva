// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package cb_larva

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CloudAdaptiveNetworkClient is the client API for CloudAdaptiveNetwork service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CloudAdaptiveNetworkClient interface {
	// Creates a new CLADNet
	CreateCLADNet(ctx context.Context, in *CreateCLADNetRequest, opts ...grpc.CallOption) (*CLADNetResponse, error)
	// Returns a specific CLADNet
	GetCLADNet(ctx context.Context, in *CLADNetID, opts ...grpc.CallOption) (*CLADNetResponse, error)
}

type cloudAdaptiveNetworkClient struct {
	cc grpc.ClientConnInterface
}

func NewCloudAdaptiveNetworkClient(cc grpc.ClientConnInterface) CloudAdaptiveNetworkClient {
	return &cloudAdaptiveNetworkClient{cc}
}

func (c *cloudAdaptiveNetworkClient) CreateCLADNet(ctx context.Context, in *CreateCLADNetRequest, opts ...grpc.CallOption) (*CLADNetResponse, error) {
	out := new(CLADNetResponse)
	err := c.cc.Invoke(ctx, "/cbnet.CloudAdaptiveNetwork/createCLADNet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudAdaptiveNetworkClient) GetCLADNet(ctx context.Context, in *CLADNetID, opts ...grpc.CallOption) (*CLADNetResponse, error) {
	out := new(CLADNetResponse)
	err := c.cc.Invoke(ctx, "/cbnet.CloudAdaptiveNetwork/getCLADNet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CloudAdaptiveNetworkServer is the server API for CloudAdaptiveNetwork service.
// All implementations must embed UnimplementedCloudAdaptiveNetworkServer
// for forward compatibility
type CloudAdaptiveNetworkServer interface {
	// Creates a new CLADNet
	CreateCLADNet(context.Context, *CreateCLADNetRequest) (*CLADNetResponse, error)
	// Returns a specific CLADNet
	GetCLADNet(context.Context, *CLADNetID) (*CLADNetResponse, error)
	mustEmbedUnimplementedCloudAdaptiveNetworkServer()
}

// UnimplementedCloudAdaptiveNetworkServer must be embedded to have forward compatible implementations.
type UnimplementedCloudAdaptiveNetworkServer struct {
}

func (UnimplementedCloudAdaptiveNetworkServer) CreateCLADNet(context.Context, *CreateCLADNetRequest) (*CLADNetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCLADNet not implemented")
}
func (UnimplementedCloudAdaptiveNetworkServer) GetCLADNet(context.Context, *CLADNetID) (*CLADNetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCLADNet not implemented")
}
func (UnimplementedCloudAdaptiveNetworkServer) mustEmbedUnimplementedCloudAdaptiveNetworkServer() {}

// UnsafeCloudAdaptiveNetworkServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CloudAdaptiveNetworkServer will
// result in compilation errors.
type UnsafeCloudAdaptiveNetworkServer interface {
	mustEmbedUnimplementedCloudAdaptiveNetworkServer()
}

func RegisterCloudAdaptiveNetworkServer(s grpc.ServiceRegistrar, srv CloudAdaptiveNetworkServer) {
	s.RegisterService(&CloudAdaptiveNetwork_ServiceDesc, srv)
}

func _CloudAdaptiveNetwork_CreateCLADNet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCLADNetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudAdaptiveNetworkServer).CreateCLADNet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbnet.CloudAdaptiveNetwork/createCLADNet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudAdaptiveNetworkServer).CreateCLADNet(ctx, req.(*CreateCLADNetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudAdaptiveNetwork_GetCLADNet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CLADNetID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudAdaptiveNetworkServer).GetCLADNet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbnet.CloudAdaptiveNetwork/getCLADNet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudAdaptiveNetworkServer).GetCLADNet(ctx, req.(*CLADNetID))
	}
	return interceptor(ctx, in, info, handler)
}

// CloudAdaptiveNetwork_ServiceDesc is the grpc.ServiceDesc for CloudAdaptiveNetwork service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CloudAdaptiveNetwork_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cbnet.CloudAdaptiveNetwork",
	HandlerType: (*CloudAdaptiveNetworkServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "createCLADNet",
			Handler:    _CloudAdaptiveNetwork_CreateCLADNet_Handler,
		},
		{
			MethodName: "getCLADNet",
			Handler:    _CloudAdaptiveNetwork_GetCLADNet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cbnetwork/cloud_adaptive_network.proto",
}
